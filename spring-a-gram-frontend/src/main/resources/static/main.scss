////////////////////////////////////////////////////////////////////////
// Pre-sets must be done BEFORE a module is imported. Some of these settings are at the top, while others
// are right before the import statement.
////////////////////////////////////////////////////////////////////////

// Spring's palette (found on spring.io)
$spring-green: #6db33f;
$spring-black: #34302d;
$spring-antique-white: #F1F1F1;
$spring-white: #eee;

//$inuit-base-font-size:  12px;
$inuit-base-line-height:  18px;
$inuit-base-background-color: $spring-antique-white;

////////////////////////////////////////////////////////////////////////
// Here are the layers of inuit. Each layer needs to have its order preserved, but modules within the same layer
// can be imported in any order.
////////////////////////////////////////////////////////////////////////

// Settings layer
@import "bower_components/inuit-defaults/settings.defaults";
@import "bower_components/inuit-responsive-settings/settings.responsive";

// Tools layer
@import "bower_components/inuit-functions/tools.functions";
@import "bower_components/inuit-mixins/tools.mixins";
@import "bower_components/inuit-responsive-tools/tools.responsive";
@import "bower_components/inuit-tools-widths/tools.widths";

// Generic layer
@import "bower_components/inuit-normalize/generic.normalize";
@import "bower_components/inuit-box-sizing/generic.box-sizing";

@import "bower_components/inuit-page/base.page";

// Objects layer
$inuit-enable-layout--large: true;
@import "bower_components/inuit-layout/objects.layout";

$inuit-enable-media--large: true;
$inuit-enable-media--responsive: true;
@import "bower_components/inuit-media/objects.media";

//$inuit-enable-btn--full: true;
$inuit-enable-btn--small: true;
$inuit-btn-background: $spring-green;
$inuit-btn-color: $spring-white;
@import "bower_components/inuit-buttons/objects.buttons";

$inuit-enable-box--tiny: true;
@import "bower_components/inuit-box/objects.box";

// Trumps layer
@import "bower_components/inuit-widths/trumps.widths";
@import "bower_components/inuit-clearfix/trumps.clearfix";
@import "bower_components/inuit-widths-responsive/trumps.widths-responsive";

////////////////////////////////////////////////////////////////////////
// Custom CSS additions and overrides
//
// This isn't to override settings from inuit, but instead, to override or add to CSS generated
// by inuit.
////////////////////////////////////////////////////////////////////////

// Plugin the Ubuntu font
html {
  font-family: 'Ubuntu', sans-serif;
}

// Dress up the top row of a "page"
// Add a small amount of padding at the bottom of a "page"
$inuit-base-spacing-unit--tiny: round($inuit-base-spacing-unit / 8);
.page {
  border-top: $spring-green solid 4px;
  color: $spring-white;
  background-color: $spring-black;
  width: 100%;
  margin-top: 0em;
  padding-bottom: $inuit-base-spacing-unit--tiny;
}

// Wrap a given block with insets so it isn't pushed to the edge of the browser
.wrapper {
  max-width: 1100px;
  margin: 0 auto;
  padding-left: 12px;
  padding-right: 12px;
}

// Fine tune the bar at the top, so it shrinks vertically on portable devices
h1 {
  @include media-query(portable) {
    margin: 0.1em 0;
  }
}

////////////////////////////////////////////////////////////////////////
// Experimental CSS spinner - Based on http://codepen.io/adonisk/pen/IAzbo/
// Removed for now
////////////////////////////////////////////////////////////////////////

// TODO: Write explanatory comment (can't remember why I made this right now)
.border {
  border: 1px solid;
}

// Extend btn so that the button is either a regular button or a small button, based on a media query.
.btn--responsive {
  @extend %btn;
  @include media-query(portable) {
    padding: $inuit-btn-padding--small - $inuit-btn-border-width  double($inuit-btn-padding--small) - $inuit-btn-border-width; /* [7] */
  }
}

.login-page .layout {
  margin-top: $inuit-base-line-height;
  margin-bottom: $inuit-base-line-height;
}


////////////////////////////////////////////////////////////////////////
// CSS Spinner
////////////////////////////////////////////////////////////////////////
//$spinner5: #ffffff;
$spinner5: $spring-green;
$spinner6: rgba(255, 255, 255, 0);
$spinner7: $spring-antique-white;

.loader {
  font-size: 20px;
  margin: 50px auto;
  text-indent: -9999em;
  width: 11em;
  height: 11em;
  border-radius: 50%;
  background: $spinner5;
  background: -moz-linear-gradient(left, $spinner5 10%, $spinner6 42%);
  background: -webkit-linear-gradient(left, $spinner5 10%, $spinner6 42%);
  background: -o-linear-gradient(left, $spinner5 10%, $spinner6 42%);
  background: -ms-linear-gradient(left, $spinner5 10%, $spinner6 42%);
  background: linear-gradient(to right, $spinner5 10%, $spinner6 42%);
  position: absolute;
  top: 25%;
  left: 45%;
  -webkit-animation: load3 1.4s infinite linear;
  animation: load3 1.4s infinite linear;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
}

.loader--responsive {
  @include media-query(portable) {
    left: 15%;
  }
}

.loader:before {
  width: 50%;
  height: 50%;
  background: $spinner5;
  border-radius: 100% 0 0 0;
  position: absolute;
  top: 0;
  left: 0;
  content: '';
}
.loader:after {
  background: $spinner7;
  width: 75%;
  height: 75%;
  border-radius: 50%;
  content: '';
  margin: auto;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}
@-webkit-keyframes load3 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load3 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}